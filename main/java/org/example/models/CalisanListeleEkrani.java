package org.example.models;

import javax.swing.*;
import java.awt.*;
import java.util.List;

// Ã‡alÄ±ÅŸan Listeleme EkranÄ±: TÃ¼m Ã§alÄ±ÅŸanlarÄ± listelemek iÃ§in kullanÄ±lan arayÃ¼z
public class CalisanListeleEkrani extends JFrame {
    final private JTextArea textAlani; // Ã‡alÄ±ÅŸan bilgilerini gÃ¶rÃ¼ntÃ¼leme alanÄ±
    final private JButton geriButonu, yenileButonu; // Geri ve Yenile butonlarÄ±
    final private JFrame oncekiEkran; // Ã–nceki ekranÄ±n referansÄ±

    // YapÄ±cÄ± metot: EkranÄ± oluÅŸturur ve gerekli bileÅŸenleri ekler
    public CalisanListeleEkrani(JFrame oncekiEkran) {
        this.oncekiEkran = oncekiEkran;

        setTitle("Ã‡alÄ±ÅŸanlarÄ± Listele"); // Pencere baÅŸlÄ±ÄŸÄ±
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // Pencere kapandÄ±ÄŸÄ±nda ana ekran aÃ§Ä±k kalÄ±r
        setLayout(new BorderLayout(10, 10)); // Ana dÃ¼zen

        // Ãœst panel: Geri ve Yenile butonlarÄ±
        JPanel ustPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        geriButonu = new JButton("â¬… Geri");
        yenileButonu = new JButton("ğŸ”„ Yenile");

        geriButonu.addActionListener(e -> {
            oncekiEkran.setVisible(true); // Ã–nceki ekranÄ± gÃ¶rÃ¼nÃ¼r yap
            dispose(); // Bu pencereyi kapat
        });

        yenileButonu.addActionListener(e -> {
            new CalisanListeleEkrani(oncekiEkran); // Yeni ekran oluÅŸtur
            dispose(); // Eski pencereyi kapat
        });

        ustPanel.add(geriButonu);
        ustPanel.add(yenileButonu);
        add(ustPanel, BorderLayout.NORTH);

        // Orta panel: Ã‡alÄ±ÅŸan bilgilerini gÃ¶rÃ¼ntÃ¼leme alanÄ±
        JPanel ortaPanel = new JPanel(new BorderLayout());
        textAlani = new JTextArea(); // Ã‡alÄ±ÅŸan bilgilerini gÃ¶sterecek alan
        textAlani.setEditable(false); // Alan sadece okunabilir
        textAlani.setFont(new Font("Arial", Font.PLAIN, 14));
        textAlani.setBackground(Color.WHITE);
        textAlani.setForeground(Color.DARK_GRAY);

        JScrollPane kaydirmaCubugu = new JScrollPane(textAlani);
        kaydirmaCubugu.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        ortaPanel.add(kaydirmaCubugu, BorderLayout.CENTER);

        // Ã‡alÄ±ÅŸan bilgilerini doldur
        calisanBilgileriniDoldur();

        add(ortaPanel, BorderLayout.CENTER);

        // Alt panel: UyarÄ± metni
        JPanel altPanel = new JPanel(new BorderLayout(10, 10));
        JTextArea uyariMetni = new JTextArea("Ã‡alÄ±ÅŸan bilgileri baÅŸarÄ±yla yÃ¼klendi.\n" +
                "- Ã‡alÄ±ÅŸan kaydÄ± yoksa ilgili mesaj gÃ¶rÃ¼ntÃ¼lenir.\n" +
                "- TÃ¼m kayÄ±tlar doÄŸru ÅŸekilde sÄ±ralanmÄ±ÅŸtÄ±r.");
        uyariMetni.setEditable(false);
        uyariMetni.setFont(new Font("Arial", Font.PLAIN, 14));
        uyariMetni.setBackground(Color.WHITE);
        uyariMetni.setForeground(Color.DARK_GRAY);
        uyariMetni.setLineWrap(true);
        uyariMetni.setWrapStyleWord(true);
        uyariMetni.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        altPanel.add(uyariMetni, BorderLayout.CENTER);

        add(altPanel, BorderLayout.SOUTH);

        // Pencere Ã¶zelliklerini ayarla
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setMinimumSize(new Dimension(400, 300));
        setVisible(true);
    }

    // Ã‡alÄ±ÅŸan bilgilerini doldurur ve gÃ¶rÃ¼ntÃ¼leme alanÄ±na ekler
    private void calisanBilgileriniDoldur() {
        try {
            CalisanDAO personelDAO = new CalisanDAO(); // Ã‡alÄ±ÅŸan veritabanÄ± iÅŸlemleri
            List<Personel> personelListesi = personelDAO.tumPersonelleriGetir(); // TÃ¼m Ã§alÄ±ÅŸanlarÄ± getir

            if (personelListesi.isEmpty()) {
                textAlani.setText("HiÃ§ Ã§alÄ±ÅŸan kaydÄ± bulunamadÄ±!"); // KayÄ±t yoksa mesaj gÃ¶ster
            } else {
                textAlani.setText("TÃ¼m Ã‡alÄ±ÅŸanlar:\n");
                for (Personel personel : personelListesi) {
                    if (personel instanceof Raporlanabilir) { // Ã‡alÄ±ÅŸan raporlanabilir mi kontrol et
                        Raporlanabilir raporlanabilir = (Raporlanabilir) personel; // Raporlanabilir olarak iÅŸle
                        textAlani.append(raporlanabilir.raporOlustur() + "\n\n"); // Raporu gÃ¶rÃ¼ntÃ¼le
                    } else {
                        textAlani.append(personel.toString() + "\n\n"); // Normal Ã§alÄ±ÅŸan bilgilerini gÃ¶ster
                    }
                }
            }
        } catch (Exception ex) {
            textAlani.setText("Hata: " + ex.getMessage()); // Hata durumunda mesaj gÃ¶ster
        }
    }
}
