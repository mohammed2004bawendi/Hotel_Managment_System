package org.example.models;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;

// Ã‡alÄ±ÅŸan MenÃ¼ EkranÄ±: Ã‡alÄ±ÅŸanlarla ilgili iÅŸlemleri gerÃ§ekleÅŸtirmek iÃ§in kullanÄ±lan ana menÃ¼ ekranÄ±.
public class CalisanMenuEkrani extends JFrame {
    private JFrame oncekiEkran; // Ã–nceki ekranÄ±n referansÄ±
    private JButton calisanEkleButonu, calisanSilButonu, calisanListeleButonu; // Ä°ÅŸlem butonlarÄ±

    // YapÄ±cÄ± metot: Ã‡alÄ±ÅŸan menÃ¼ ekranÄ±nÄ± oluÅŸturur.
    public CalisanMenuEkrani(JFrame oncekiEkran) {
        this.oncekiEkran = oncekiEkran;

        setTitle("Ã‡alÄ±ÅŸan MenÃ¼ EkranÄ±"); // Pencere baÅŸlÄ±ÄŸÄ±
        setExtendedState(JFrame.MAXIMIZED_BOTH);// BaÅŸlangÄ±Ã§ boyutu
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // Pencere kapandÄ±ÄŸÄ±nda uygulama aÃ§Ä±k kalÄ±r
        setLayout(null); // Serbest dÃ¼zen kullanÄ±lÄ±yor

        // Arkaplan resmini yÃ¼kle ve ortalama rengini hesapla
        BufferedImage arkaPlanResmi = null;
        try {
            arkaPlanResmi = ImageIO.read(getClass().getClassLoader().getResource("calisan_menu.png"));
        } catch (IOException e) {
            throw new RuntimeException("Arka plan resmi yÃ¼klenemedi.", e);
        }

        int genislik = arkaPlanResmi.getWidth();
        int yukseklik = arkaPlanResmi.getHeight();
        long toplamKirmizi = 0, toplamYesil = 0, toplamMavi = 0;

        for (int x = 0; x < genislik; x++) {
            for (int y = 0; y < yukseklik; y++) {
                Color pikselRenk = new Color(arkaPlanResmi.getRGB(x, y));
                toplamKirmizi += pikselRenk.getRed();
                toplamYesil += pikselRenk.getGreen();
                toplamMavi += pikselRenk.getBlue();
            }
        }

        int ortalamaKirmizi = (int) (toplamKirmizi / (genislik * yukseklik));
        int ortalamaYesil = (int) (toplamYesil / (genislik * yukseklik));
        int ortalamaMavi = (int) (toplamMavi / (genislik * yukseklik));

        Color ortalamaRenk = new Color(ortalamaKirmizi, ortalamaYesil, ortalamaMavi);

        // Arkaplan paneli oluÅŸtur
        JPanel arkaPlanPaneli = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                // Arkaplan resmini yÃ¼kle ve panele Ã§iz
                ImageIcon arkaPlanIkonu = new ImageIcon(getClass().getClassLoader().getResource("calisan_menu.png"));
                if (arkaPlanIkonu.getImage() != null) {
                    Image arkaPlanGorsel = arkaPlanIkonu.getImage();
                    g.drawImage(arkaPlanGorsel, 0, 0, getWidth(), getHeight(), this);
                } else {
                    System.err.println("Resim bulunamadÄ±: calisan_menu.png");
                }
            }
        };
        arkaPlanPaneli.setLayout(null); // Serbest dÃ¼zen
        arkaPlanPaneli.setBounds(0, 0, getWidth(), getHeight()); // TÃ¼m pencereyi kaplayacak ÅŸekilde ayarlanÄ±r

        // MenÃ¼ Ã§ubuÄŸu oluÅŸtur ve Geri/Yenile butonlarÄ± ekle
        JMenuBar menuCubugu = new JMenuBar();
        JButton geriButonu = new JButton("â¬… Geri");
        geriButonu.addActionListener((ActionEvent e) -> {
            oncekiEkran.setVisible(true); // Ã–nceki ekranÄ± gÃ¶rÃ¼nÃ¼r yap
            dispose(); // Bu ekranÄ± kapat
        });

        JButton yenileButonu = new JButton("ğŸ”„ Yenile");
        yenileButonu.addActionListener((ActionEvent e) -> {
            new CalisanMenuEkrani(oncekiEkran); // Yeni ekran oluÅŸtur
            dispose(); // Eski ekranÄ± kapat
        });

        menuCubugu.add(geriButonu);
        menuCubugu.add(yenileButonu);
        setJMenuBar(menuCubugu);

        // Ã‡alÄ±ÅŸan iÅŸlemleri iÃ§in butonlar oluÅŸtur
        calisanEkleButonu = new JButton("Ã‡alÄ±ÅŸan Ekle");
        calisanSilButonu = new JButton("Ã‡alÄ±ÅŸan Sil");
        calisanListeleButonu = new JButton("Ã‡alÄ±ÅŸanlarÄ± Listele");

        // ButonlarÄ±n baÅŸlangÄ±Ã§ pozisyonlarÄ±nÄ± ayarla
        calisanEkleButonu.setBounds(300, 100, 200, 40);
        calisanSilButonu.setBounds(300, 170, 200, 40);
        calisanListeleButonu.setBounds(300, 240, 200, 40);

        // Buton renklerini ayarla
        calisanEkleButonu.setBackground(ortalamaRenk);
        calisanSilButonu.setBackground(ortalamaRenk);
        calisanListeleButonu.setBackground(ortalamaRenk);

        calisanEkleButonu.setForeground(Color.WHITE);
        calisanSilButonu.setForeground(Color.WHITE);
        calisanListeleButonu.setForeground(Color.WHITE);

        // ButonlarÄ± arkaplan paneline ekle
        arkaPlanPaneli.add(calisanEkleButonu);
        arkaPlanPaneli.add(calisanSilButonu);
        arkaPlanPaneli.add(calisanListeleButonu);

        // Buton aksiyonlarÄ±nÄ± tanÄ±mla
        calisanEkleButonu.addActionListener(e -> {
            new CalisanEkleEkrani(this); // Ã‡alÄ±ÅŸan ekleme ekranÄ±nÄ± aÃ§
            dispose();
        });
        calisanSilButonu.addActionListener(e -> {
            new CalisanSilEkrani(this); // Ã‡alÄ±ÅŸan silme ekranÄ±nÄ± aÃ§
            dispose();
        });
        calisanListeleButonu.addActionListener(e -> {
            new CalisanListeleEkrani(this); // Ã‡alÄ±ÅŸan listeleme ekranÄ±nÄ± aÃ§
            dispose();
        });

        // Arkaplan panelini pencereye ekle
        add(arkaPlanPaneli);

        // Pencere boyutu deÄŸiÅŸtiÄŸinde arkaplan ve buton pozisyonlarÄ±nÄ± yeniden ayarla
        addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                arkaPlanPaneli.setBounds(0, 0, getWidth(), getHeight()); // Arkaplan panelini yeniden boyutlandÄ±r
                arkaPlanPaneli.repaint(); // Arkaplan gÃ¶rÃ¼ntÃ¼sÃ¼nÃ¼ yeniden Ã§iz
                butonPozisyonlariniAyarla(); // Buton pozisyonlarÄ±nÄ± yeniden hesapla
            }
        });

        setVisible(true); // Pencereyi gÃ¶rÃ¼nÃ¼r yap
    }

    // Pencere boyutuna gÃ¶re buton pozisyonlarÄ±nÄ± yeniden hesaplayan metot
    private void butonPozisyonlariniAyarla() {
        int genislik = getWidth();
        int yukseklik = getHeight();

        int butonGenislik = 200;
        int butonYukseklik = 40;

        calisanEkleButonu.setBounds((genislik - butonGenislik) / 2, yukseklik / 3, butonGenislik, butonYukseklik);
        calisanSilButonu.setBounds((genislik - butonGenislik) / 2, yukseklik / 3 + 70, butonGenislik, butonYukseklik);
        calisanListeleButonu.setBounds((genislik - butonGenislik) / 2, yukseklik / 3 + 140, butonGenislik, butonYukseklik);
    }
}
