package org.example.models;

import javax.swing.*;
import java.awt.*;

// Ã‡alÄ±ÅŸan Silme EkranÄ±: Belirli bir kimlik numarasÄ± ile Ã§alÄ±ÅŸan silmek iÃ§in kullanÄ±lan arayÃ¼z
public class CalisanSilEkrani extends JFrame {
    private JTextField kimlikAlani; // Kimlik numarasÄ± giriÅŸ alanÄ±
    private JButton silButonu, geriButonu, yenileButonu; // Ä°ÅŸlem butonlarÄ±
    private JFrame oncekiEkran; // Ã–nceki ekranÄ±n referansÄ±

    // YapÄ±cÄ± metot: Ã‡alÄ±ÅŸan silme ekranÄ±nÄ± oluÅŸturur
    public CalisanSilEkrani(JFrame oncekiEkran) {
        this.oncekiEkran = oncekiEkran;

        setTitle("Ã‡alÄ±ÅŸan Sil"); // Pencere baÅŸlÄ±ÄŸÄ±
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // Pencere kapandÄ±ÄŸÄ±nda ana ekran aÃ§Ä±k kalÄ±r
        setLayout(new BorderLayout(10, 10)); // Ana dÃ¼zen

        // Ãœst panel: Geri ve Yenile butonlarÄ±
        JPanel ustPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        geriButonu = new JButton("â¬… Geri");
        yenileButonu = new JButton("ğŸ”„ Yenile");

        geriButonu.addActionListener(e -> {
            oncekiEkran.setVisible(true); // Ã–nceki ekranÄ± gÃ¶rÃ¼nÃ¼r yap
            dispose(); // Bu pencereyi kapat
        });

        yenileButonu.addActionListener(e -> {
            new CalisanSilEkrani(oncekiEkran); // Yeni ekran oluÅŸtur
            dispose(); // Eski pencereyi kapat
        });

        ustPanel.add(geriButonu);
        ustPanel.add(yenileButonu);
        add(ustPanel, BorderLayout.NORTH);

        // Orta panel: Kimlik numarasÄ± giriÅŸ alanÄ±
        JPanel ortaPanel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10); // Ä°Ã§erik aralÄ±ÄŸÄ±
        gbc.anchor = GridBagConstraints.WEST;

        JLabel kimlikEtiketi = new JLabel("Personel Kimlik No:");
        kimlikEtiketi.setFont(new Font("Arial", Font.BOLD, 16));
        kimlikAlani = new JTextField(20); // GiriÅŸ alanÄ±
        kimlikAlani.setFont(new Font("Arial", Font.PLAIN, 16));

        // BileÅŸenleri orta panele ekle
        gbc.gridx = 0;
        gbc.gridy = 0;
        ortaPanel.add(kimlikEtiketi, gbc);

        gbc.gridx = 1;
        ortaPanel.add(kimlikAlani, gbc);

        add(ortaPanel, BorderLayout.CENTER);

        // Alt panel: UyarÄ± mesajÄ± ve "Sil" butonu
        JPanel altPanel = new JPanel(new BorderLayout(10, 10));
        JTextArea uyariMetni = new JTextArea("LÃ¼tfen aÅŸaÄŸÄ±daki talimatlara uygun hareket edin:\n" +
                "- Ã‡alÄ±ÅŸan kimlik numarasÄ±nÄ± doÄŸru girin.\n" +
                "- Kimlik sistemde mevcut deÄŸilse iÅŸlem yapÄ±lamaz.");
        uyariMetni.setEditable(false);
        uyariMetni.setFont(new Font("Arial", Font.PLAIN, 14));
        uyariMetni.setBackground(Color.WHITE);
        uyariMetni.setForeground(Color.DARK_GRAY);
        uyariMetni.setLineWrap(true);
        uyariMetni.setWrapStyleWord(true);
        uyariMetni.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        altPanel.add(uyariMetni, BorderLayout.NORTH);

        silButonu = new JButton("Sil");
        silButonu.setFont(new Font("Arial", Font.BOLD, 16));
        silButonu.setPreferredSize(new Dimension(100, 40));
        silButonu.addActionListener(e -> calisanSilIslemi());
        altPanel.add(silButonu, BorderLayout.SOUTH);

        add(altPanel, BorderLayout.SOUTH);

        // Pencere Ã¶zelliklerini ayarla
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setMinimumSize(new Dimension(400, 300));
        setVisible(true);
    }

    // Ã‡alÄ±ÅŸan silme iÅŸlemi
    private void calisanSilIslemi() {
        String kimlik = kimlikAlani.getText().trim(); // GiriÅŸ alanÄ±ndan kimlik numarasÄ±nÄ± al

        try {
            // BoÅŸ giriÅŸ kontrolÃ¼
            if (kimlik.isEmpty()) {
                throw new IllegalArgumentException("LÃ¼tfen personel kimlik numarasÄ±nÄ± girin!");
            }

            // Ã‡alÄ±ÅŸan kontrolÃ¼ ve silme iÅŸlemi
            CalisanDAO personelDAO = new CalisanDAO();
            if (!personelDAO.personelVarMi(kimlik)) { // Ã‡alÄ±ÅŸanÄ±n mevcut olup olmadÄ±ÄŸÄ±nÄ± kontrol et
                throw new IllegalArgumentException("Hata: Ã‡alÄ±ÅŸan bulunamadÄ±!");
            }

            personelDAO.personelSil(kimlik); // Ã‡alÄ±ÅŸanÄ± sil
            JOptionPane.showMessageDialog(this, "Ã‡alÄ±ÅŸan baÅŸarÄ±yla silindi!");

            // Silme iÅŸleminden sonra giriÅŸ alanÄ±nÄ± temizle
            kimlikAlani.setText("");

        } catch (IllegalArgumentException ex) {
            JOptionPane.showMessageDialog(this, "Hata: " + ex.getMessage(), "Hata", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Hata: " + ex.getMessage(), "Hata", JOptionPane.ERROR_MESSAGE);
        }
    }
}
